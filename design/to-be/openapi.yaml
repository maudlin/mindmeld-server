openapi: 3.1.0
info:
  title: MindMeld Server API (MVP)
  version: 0.1.0
  description: Minimal API for managing mind map documents with optimistic concurrency.
servers:
  - url: http://localhost:3001
    description: Local development
tags:
  - name: maps
paths:
  /maps:
    get:
      tags: [maps]
      summary: List maps (id, name, version, updatedAt, size)
      operationId: listMaps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapSummary'
    post:
      tags: [maps]
      summary: Create a map
      operationId: createMap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapCreateRequest'
      responses:
        '201':
          description: Created
          headers:
            ETag:
              description: Strong ETag (sha256 of canonical data payload)
              schema:
                {
                  type: string,
                  example: '"e3b0c44298fc1c149afbf4c8996fb924..."'
                }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '400': { $ref: '#/components/responses/BadRequest' }
  /maps/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string, format: uuid }
    get:
      tags: [maps]
      summary: Get a map
      operationId: getMap
      responses:
        '200':
          description: OK
          headers:
            ETag:
              description: Strong ETag (sha256 of canonical data payload)
              schema:
                {
                  type: string,
                  example: '"e3b0c44298fc1c149afbf4c8996fb924..."'
                }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [maps]
      summary: Replace map state with optimistic concurrency
      operationId: updateMap
      parameters:
        - name: If-Match
          in: header
          required: false
          description: Supply last-seen ETag to protect against concurrent updates (alternative to version field)
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapUpdateRequest'
      responses:
        '200':
          description: Updated
          headers:
            ETag:
              description: New ETag after update
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '409':
          description: Conflict (version or If-Match ETag mismatch)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [maps]
      summary: Delete a map
      operationId: deleteMap
      responses:
        '204': { description: No Content }
        '404': { $ref: '#/components/responses/NotFound' }
  /maps/{id}/meta:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string, format: uuid }
    patch:
      tags: [maps]
      summary: Update map metadata (e.g., name)
      operationId: patchMapMeta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapMetaPatchRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }

components:
  schemas:
    MapSummary:
      type: object
      required: [id, version, updatedAt]
      properties:
        id: { type: string, format: uuid }
        name: { type: string, minLength: 1 }
        version: { type: integer, minimum: 1 }
        updatedAt: { type: string, format: date-time }
        size: { type: integer, minimum: 0 }
    Map:
      type: object
      required: [id, version, updatedAt, data]
      properties:
        id: { type: string, format: uuid }
        name: { type: string, minLength: 1 }
        version:
          description: Monotonic integer used for optimistic concurrency
          type: integer
          minimum: 1
        updatedAt: { type: string, format: date-time }
        data:
          description: Opaque client JSON document representing a map
          type: object
          additionalProperties: true
      examples:
        minimal:
          summary: Minimal map
          value:
            id: 4d8a9e7c-6a1e-4c55-8b4b-2a8d9f1b1c2e
            name: Project Plan
            version: 3
            updatedAt: 2025-08-24T12:00:00.000Z
            data: { n: [], c: [] }
    MapCreateRequest:
      type: object
      required: [name, data]
      properties:
        name: { type: string, minLength: 1 }
        data:
          type: object
          additionalProperties: true
    MapUpdateRequest:
      type: object
      required: [data, version]
      properties:
        data:
          type: object
          additionalProperties: true
        version:
          description: Last-seen version; server increments on success
          type: integer
          minimum: 1
      example:
        data: { n: [{ id: 'n1' }], c: [] }
        version: 2
    MapMetaPatchRequest:
      type: object
      required: [name]
      properties:
        name: { type: string, minLength: 1 }
    Error:
      type: object
      required: [message]
      properties:
        message: { type: string }
        code: { type: string }
        details: { type: object, additionalProperties: true }
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
